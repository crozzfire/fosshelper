{"took":26,"timed_out":false,"_shards":{"total":10,"successful":10,"failed":0},"hits":{"total":22,"max_score":0.5003418,"hits":[{"_index":"fosshelper","_type":"repos","_id":"56340a34c97470d7feb481c9","_score":0.5003418,"_source":{"watchers": 5369, "name": "popcorn-app", "language": "CSS", "source": "github", "created_at": "2014-02-19T15:59:58", "description": "An experiment using the peerflix module of nodejs and connecting a bunch of APIs.", "html_url": "https://github.com/popcorn-time/popcorn-app", "owner": {"url": "https://api.github.com/users/popcorn-time", "avatar_url": "https://avatars.githubusercontent.com/u/6628942?v=3", "type": "Organization"}, "updated_at": "2015-10-30T16:44:40", "readme": "###  README.md\n\n# Popcorn time ![Dependency Status](https://camo.githubusercontent.com/a7f3e3f\n40717eff70da7673f2081114a4edb25de/68747470733a2f2f64617669642d646d2e6f72672f70\n6f70636f726e2d74696d652f706f70636f726e2d6170702e706e673f7468656d653d736869656c\n64732e696f)\n\n# Goodbye\n\n**Update** _15 March 2014_ : Sorry friends, but we removed issue tracking because it was being used to link elsewhere.\n\n## Idea\n\nTo allow any computer user to watch movies easily streaming from torrents,\nwithout any particular knowledge.\n\n![Demo Screenshot](https://camo.githubusercontent.com/5ee3a600ad6bb2afe7c61cdc\nc8b5856a694959c9/687474703a2f2f676574706f70636f726e74692e6d652f696d616765732f6\n86f772d75692e706e67)\n\n### Status\n\nUnder development (RC1) for Mac OSX - Windows - Linux.\n\n### APIs\n\n**Currently used:**\n\n  * <del>RottenTomatoes for movies metadata.</del>\n  * <del>PirateBay Recent popular movies list.</del>\n  * YIFY movie torrents API.\n  * OpenSubtitles for subtitles\n  * TheMovieDB for movies metadata.\n\n**In discussion:**\n\n  * SubtitleSeeker for subtitles.\n\n## Building\n\n### Dependencies\n\nYou will need nodejs and grunt:\n\n    \n    \n    $ npm install -g grunt-cli\n    \n\n### Build\n\nInstall the node modules:\n\n    \n    \n    $ npm install\n    \n\nBuild with:\n\n    \n    \n    $ grunt nodewkbuild\n    \n\nBy default it will build for your current platform however you can control\nthat by specifying a comma separated list of platforms in the `platforms`\noption to grunt:\n\n    \n    \n    $ grunt nodewkbuild --platforms=linux32,linux64,mac,win\n    \n\nYou can also build for all platforms with:\n\n    \n    \n    $ grunt nodewkbuild --platforms=all\n    \n\n## Any problem?\n\n### Regarding superagent dependency\n\nDue to wrong browser verification on a dependency, this hard fix must be\napplied. Replace `node_modules/moviedb/node_modules/superagent/index.js`\ncontents with:\n\n    \n    \n    // if (typeof window != 'undefined') {\n    //   module.exports = require('./lib/superagent');\n    // } else if (process.env.SUPERAGENT_COV) {\n    //   module.exports = require('./lib-cov/node');\n    // } else {\n      module.exports = require('./lib/node');\n    // }\n\n### Regarding Video, MP4 H264 Playback\n\n  * Info: https://github.com/rogerwang/node-webkit/wiki/Support-mp3-and-h264-in-video-and-audio-tag\n  * Needed to build a custom build of node-webkit that adds h264 support (or you can download ready-to-go builds from https://file.ac/s4Lt3Vo6rls/)\n  * Alternatively, we can replace a .so and .dll file from the correspondent Chrome build to node-webkit and node-webkit.exe\n\n## Development\n\n  * Run `compass watch` in Terminal for CSS compiling and listen to future changes.\n  * How to build with SublimeText\n  * Currently Gaze to watch all files and reload the app is disabled due to memory leaks and unstability.\n  * Run node-webkit from the root directory with --debug to enable debugging mode like so `node-webkit . --debug`\n\n", "last_crawled_at": "2015-10-30T17:24:16.871000", "git_url": "git://github.com/popcorn-time/popcorn-app.git", "open_issues": 191, "forks": 2179, "id": 16989736, "size": 123428}},{"_index":"fosshelper","_type":"repos","_id":"56340a45c97470d7feb48272","_score":0.29032785,"_source":{"watchers": 76, "name": "snowplow-javascript-tracker", "language": "JavaScript", "source": "github", "created_at": "2013-07-07T18:38:59", "description": "Snowplow event tracker for client-side JavaScript. Add analytics to your websites and web apps. (See also: snowplow-nodejs-tracker)", "html_url": "https://github.com/snowplow/snowplow-javascript-tracker", "owner": {"url": "https://api.github.com/users/snowplow", "avatar_url": "https://avatars.githubusercontent.com/u/1476001?v=3", "type": "Organization"}, "updated_at": "2015-10-27T03:08:01", "readme": "###  README.md\n\n# JavaScript web analytics for Snowplow\n\n![Build Status](https://camo.githubusercontent.com/b4cf147e3ad210ad816853f7d55\n92fdf651ccd04/68747470733a2f2f7472617669732d63692e6f72672f736e6f77706c6f772f73\n6e6f77706c6f772d6a6176617363726970742d747261636b65722e706e673f6272616e63683d6d\n6173746572) ![Selenium Test Status](https://camo.githubusercontent.com/8b9bbc2\n44b99c9d4e6bfbbd6acd6936e3addda02/68747470733a2f2f73617563656c6162732e636f6d2f\n6275696c647374617475732f736e6f77706c6f77) ![Code Climate](https://camo.githubu\nsercontent.com/4fedd6cb9cf518cf60fbfefddb33ddd16b8c5e32/68747470733a2f2f636f64\n65636c696d6174652e636f6d2f6769746875622f736e6f77706c6f772f736e6f77706c6f772d6a\n6176617363726970742d747261636b65722e706e67) ![Built with Grunt](https://camo.g\nithubusercontent.com/02d9825a669fb5b9f53bfe2e5a3fa4a1081cdb6a/68747470733a2f2f\n63646e2e6772756e746a732e636f6d2f6275696c74776974682e706e67) ![License](https:/\n/camo.githubusercontent.com/729eaf57408eb3445ee0f32abcaf2737b9be9d69/687474703\na2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d73696d706c69666\n965642d2d6273642d626c75652e7376673f7374796c653d666c6174)\n\n## Overview\n\nAdd analytics to your websites and web apps with the Snowplow event tracker\nfor JavaScript.\n\nWith this tracker you can collect user event data (page views, e-commerce\ntransactions etc) from the client-side tier of your websites and web apps.\n\n## Find out more\n\nTechnical Docs | Setup Guide | Roadmap &amp; Contributing  \n---|---|---  \n![i1](https://camo.githubusercontent.com/8c6159b25596bb5a534a95784f8c7bd38fefe\n95a/68747470733a2f2f64336936666d7331636d316a30692e636c6f756466726f6e742e6e6574\n2f6769746875622f696d616765732f74656368646f63732e706e67) |  ![i2](https://camo.\ngithubusercontent.com/0390397513935043e56a7829a27810eee31458d9/68747470733a2f2\nf64336936666d7331636d316a30692e636c6f756466726f6e742e6e65742f6769746875622f696\nd616765732f73657475702e706e67) | ![i3](https://camo.githubusercontent.com/80cb\n14d5c90978bd9ac999eaaeedb559a7621eb7/68747470733a2f2f64336936666d7331636d316a3\n0692e636c6f756466726f6e742e6e65742f6769746875622f696d616765732f726f61646d61702\ne706e67)  \nTechnical Docs | Setup Guide | _coming soon_  \n  \n## Developers\n\n### Contributing quickstart\n\nAssuming git, Vagrant and VirtualBox installed:\n\n    \n    \n     host$ git clone https://github.com/snowplow/snowplow-javascript-tracker.git\n     host$ cd snowplow-javascript-tracker\n     host$ vagrant up && vagrant ssh\n    guest$ cd /vagrant\n    guest$ sudo npm install\n    guest$ cd core\n    guest$ sudo npm install\n    \n\nSet up an `./aws.json` file using the example `./aws.sample.json`. If you just\nwant to concat + minify without uploading then you don't need to fill out the\n`aws.json` file with valid credentials.\n\nBuild the package (default task concatenates and minifies) using `grunt`.\n\n## Testing\n\n![Selenium Test Status](https://camo.githubusercontent.com/dfbd79fe7234e0bba8a\n3c5237f4d2e3856dc30f1/68747470733a2f2f73617563656c6162732e636f6d2f62726f777365\n722d6d61747269782f736e6f77706c6f772e737667)\n\n## Copyright and license\n\nThe Snowplow JavaScript Tracker is based on Anthon Pang's `piwik.js`, the\nJavaScript tracker for the open-source Piwik project, and is distributed under\nthe same license (Simplified BSD).\n\nSignificant portions of the Snowplow JavaScript Tracker copyright 2010 Anthon\nPang. Remainder copyright 2012-14 Snowplow Analytics Ltd.\n\nLicensed under the Simplified BSD license.\n\n", "last_crawled_at": "2015-10-30T17:24:35.882000", "git_url": "git://github.com/snowplow/snowplow-javascript-tracker.git", "open_issues": 108, "forks": 51, "id": 11238039, "size": 2702}},{"_index":"fosshelper","_type":"repos","_id":"56340a7fc97470d7feb48525","_score":0.17565602,"_source":{"watchers": 6268, "name": "stylus", "language": "JavaScript", "source": "github", "created_at": "2010-12-28T22:11:43", "description": "Expressive, robust, feature-rich CSS language built for nodejs", "html_url": "https://github.com/stylus/stylus", "owner": {"url": "https://api.github.com/users/stylus", "avatar_url": "https://avatars.githubusercontent.com/u/10009463?v=3", "type": "Organization"}, "updated_at": "2015-10-30T20:25:43", "readme": "###  Readme.md\n\n# Stylus ![Build Status](https://camo.githubusercontent.com/0eb80d09bdb366e865\n1e53cec9930daf3d51de6e/68747470733a2f2f7472617669732d63692e6f72672f7374796c757\n32f7374796c75732e7376673f6272616e63683d6d6173746572)\n\nStylus is a revolutionary new language, providing an efficient, dynamic, and\nexpressive way to generate CSS. Supporting both an indented syntax and regular\nCSS style.\n\n## Installation\n\n    \n    \n    $ npm install stylus -g\n\n### Example\n\n    \n    \n    border-radius()\n      -webkit-border-radius: arguments\n      -moz-border-radius: arguments\n      border-radius: arguments\n    \n    body a\n      font: 12px/1.4 \"Lucida Grande\", Arial, sans-serif\n      background: black\n      color: #ccc\n    \n    form input\n      padding: 5px\n      border: 1px solid\n      border-radius: 5px\n\ncompiles to:\n\n    \n    \n    body a {\n      font: 12px/1.4 \"Lucida Grande\", Arial, sans-serif;\n      background: #000;\n      color: #ccc;\n    }\n    form input {\n      padding: 5px;\n      border: 1px solid;\n      -webkit-border-radius: 5px;\n      -moz-border-radius: 5px;\n      border-radius: 5px;\n    }\n\nthe following is equivalent to the indented version of Stylus source, using\nthe CSS syntax instead:\n\n    \n    \n    border-radius() {\n      -webkit-border-radius: arguments\n      -moz-border-radius: arguments\n      border-radius: arguments\n    }\n    \n    body a {\n      font: 12px/1.4 \"Lucida Grande\", Arial, sans-serif;\n      background: black;\n      color: #ccc;\n    }\n    \n    form input {\n      padding: 5px;\n      border: 1px solid;\n      border-radius: 5px;\n    }\n\n### Features\n\nStylus has _many_ features. Detailed documentation links follow:\n\n  * css syntax support\n  * mixins\n  * keyword arguments\n  * variables\n  * interpolation\n  * arithmetic, logical, and equality operators\n  * importing of other stylus sheets\n  * introspection api\n  * type coercion\n  * @extend\n  * conditionals\n  * iteration\n  * nested selectors\n  * parent reference\n  * in-language functions\n  * variable arguments\n  * built-in functions (over 60)\n  * optional image inlining\n  * optional compression\n  * JavaScript API\n  * extremely terse syntax\n  * stylus executable\n  * error reporting\n  * single-line and multi-line comments\n  * css literal\n  * character escaping\n  * @keyframes support &amp; expansion\n  * @font-face support\n  * @media support\n  * Connect Middleware\n  * TextMate bundle\n  * Coda/SubEtha Edit Syntax mode\n  * gedit language-spec\n  * VIM Syntax\n  * Espresso Sugar\n  * Firebug extension\n  * heroku web service for compiling stylus\n  * style guide parser and generator\n  * transparent vendor-specific function expansion\n\n### Community modules\n\n  * https://github.com/stylus/stylus/wiki\n\n### Framework Support\n\n  * Connect\n  * Play! 2.0\n  * Ruby On Rails\n  * Meteor\n  * Grails\n  * Derby\n\n### CMS Support\n\n  * DocPad\n  * Punch\n\n### Screencasts\n\n  * Stylus Intro\n  * CSS Syntax &amp; Postfix Conditionals\n\n### Authors\n\n  * TJ Holowaychuk (tj)\n\n### More Information\n\n  * Language comparisons\n\n## License\n\n(The MIT License)\n\nCopyright (c) Automattic &lt;developer.wordpress.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n", "last_crawled_at": "2015-10-30T17:24:16.871000", "git_url": "git://github.com/stylus/stylus.git", "open_issues": 128, "forks": 859, "id": 1204214, "size": 16871}},{"_index":"fosshelper","_type":"repos","_id":"56340a39c97470d7feb481ee","_score":0.1628435,"_source":{"watchers": 329, "name": "asset-rack", "language": "CoffeeScript", "source": "github", "created_at": "2012-07-03T18:59:25", "description": "Static Web Framework for Nodejs", "html_url": "https://github.com/techpines/asset-rack", "owner": {"url": "https://api.github.com/users/techpines", "avatar_url": "https://avatars.githubusercontent.com/u/1779513?v=3", "type": "User"}, "updated_at": "2015-10-30T07:33:06", "readme": "###  README.md\n\n![](https://camo.githubusercontent.com/bf0d70b6abebbf8ccbd29bc31859c927df8b681\n9/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f74656d702e7465636870696e65\n732e636f6d2f61737365742d7261636b2d77686974652e706e67)\n\n# The Static Web is here\n\nThe Static Web is **blisteringly fast**. The Static Web is **ultra\nefficient**. The Static Web is **cutting edge**. And now it has a hero.\n\n    \n    \n    rack = require 'asset-rack'\n\nThe Static Web is an incredibly modern, high-performance platform for\ndelivering apps and services. But before you dive-in, you need to start with\nthe basics. You need to understand the fundamental building block of the\nstatic web, the **asset**.\n\n## What is an Asset?\n\n> **An asset is a resource on the web that has the following three features:**\n\n  1. **Location (URL)**: Where on the web the resource is located.\n  2. **Contents (HTTP Response Body)**: The body of the response received by a web client.\n  3. **Meta Data (HTTP Headers)**: Gives information about the resource, like content-type, caching info.\n\nThis simple definition is the theoretical bedrock of this entire framework.\n\n## Getting Started\n\nLet's look at a simple example.\n\n    \n    \n    asset = new rack.Asset({\n        url: '/hello.txt',\n        contents: 'hello world'\n    })\n\nNeed to serve that asset with a blisteringly fast in memory cache using\nexpress?\n\n    \n    \n    app.use(asset)\n    \n\n### Hash for speed and efficiency\n\nWhat's cool is that this new asset is available both here:\n\n    \n    \n    /hello.txt\n    \n\nAnd here\n\n    \n    \n    /hello-5eb63bbbe01eeed093cb22bb8f5acdc3.txt\n    \n\nThat long string of letters and numbers is the md5 hash of the contents. If\nyou hit the hash url, then we automatically set the HTTP cache to **never\nexpire**.\n\nNow proxies, browsers, cloud storage, content delivery networks only need to\ndownload your asset one single time. You have versioning, conflict resolution\nall in one simple mechanism. You can update your entire entire app\ninstantaneously. Fast, efficient, static.\n\n### One Rack to rule them All\n\nAssets need to be managed. Enter the Rack. A Rack serializes your assets,\nallows you to deploy to the cloud, and reference urls and tags in your\ntemplates.\n\nSay you have a directory structure like this:\n\n    \n    \n    /static      # all your images, fonts, etc.\n    /style.less  # a less files with your styles\n    \n\nYou can create a Rack to put all your assets in.\n\n    \n    \n    assets = new rack.Rack([\n        new rack.StaticAssets({\n            urlPrefix: '/static',\n            dirname: __dirname + '/static'\n        }),\n        new rack.LessAsset({\n            url: '/style.css',\n            filename: __dirname + '/style.less'\n        })\n    ])\n\n### Use in your Templates\n\nAfter you hook into express, you can reference your assets in your server side\ntemplates.\n\n    \n    \n    assets.tag('/style.css')\n\nWhich gives you the html tag.\n\n    \n    \n    <link href=\"/style-0f2j9fj039fuw0e9f23.css\" rel=\"stylesheet\">\n\nOr you can grab just the url.\n\n    \n    \n    assets.url('/logo.png')\n\nWhich gives the hashed url.\n\n    \n    \n    /logo-34t90j0re9g034o4f3o4f3.png\n    \n\n# Batteries Included\n\nWe have some professional grade assets included.\n\n#### For Javascript\n\n  * Browserify \\- Create browserify assets that allow you to use \"node-style\" requires on the client-side.\n  * Snockets \\- Create snockets assets, to get the node-flavor of the \"sprockets\" from rails.\n\n#### For Stylesheets\n\n  * Less \\- Compile less assets, ability to use dependencies, minification.\n  * Stylus \\- Compile stylu assets, ability to use dependencies, minification.\n\n#### Templates\n\n  * Jade \\- High, performance jade templates precompiled for the browser.\n  * AngularTemplates \\- AngularJS templates for you AngularJS folks.\n\n#### Other\n\n  * StaticAssets \\- Images(png, jpg, gif), fonts, whatever you got.\n  * DynamicAssets \\- For compiling file-based assets like Less or Stylus in an entire directory.\n\n## Roll your own\n\nAsset Rack is extremely flexible. Extend the **Asset** class and override the\n**create** method to roll your own awesomeness, and watch them get\nautomatically ka-pow'ed by your rack.\n\n    \n    \n    SuperCoolAsset = rack.Asset.extend({\n        create: function(options) {\n            this.contents = 'easy, easy',\n            this.emit 'created',\n        }\n    })\n\nOr, for those with more refined taste:\n\n    \n    \n    class SuperCoolAsset extends rack.Asset\n        create: (options) ->\n            @contents = 'even easier with coffee'\n            @emit 'created'\n\nCheckout the tutorial.\n\n## Deploying to the Cloud\n\nYour assets need to be deployed! Here are the current providers that are\nsupported.\n\n### Amazon S3\n\n    \n    \n    assets.deploy({\n        provider: 'amazon',\n        container: 'some-bucket',\n        accessKey: 'aws-access-key',\n        secretKey: 'aws-secret-key',\n    }, function(error) {})\n\n### Rackspace Cloud Files\n\n    \n    \n    assets.deploy(\n        provider: 'rackspace',\n        container: 'some-container',\n        username: 'rackspace-username',\n        apiKey: 'rackspace-api-key',\n    }, function(error) {})\n\n### Azure Storage\n\n    \n    \n    assets.deploy(\n        provider: 'azure',\n        container: 'some-container',\n        storageAccount: 'test-storage-account',\n        storageAccessKey: 'test-storage-access-key'\n    }, function(error) {})\n\n### Running in Production Mode\n\nIf you provide the options `configFile` in your deploy options then a config\nfile will be written:\n\n    \n    \n    assets.deploy(\n        configFile: __dirname + '/rack.json',\n        provider: 'amazon',\n        container: ...\n    )\n\nThen you can create your assets from the file like this:\n\n    \n    \n    assets = rack.fromConfigFile({\n        configFile: __dirname + '/rack.json',\n        hostname: 'cdn.example.com'\n    });\n    app.use(assets);\n\nAnd now all of your server side templates will reference your CDN. Also, if\nyou do happen to hit one of your static urls on the server, then you will be\nredirected to the CDN.\n\n## FAQ\n\n#### **Why is this better than Connect-Assets?**\n\nThat's easy!\n\n  * It works with node.js multi-process and cluster.\n  * More built-in assets.\n  * Un-opionated, connect-assets dictates your url structure AND directory structure.\n  * Ability to deploy to the cloud.\n  * Easy to extend.\n  * Simpler to use.\n\nWith all that said, much thanks to Trevor for writing connect-assets.\n\n#### **Why is this better than Grunt?**\n\nGrunt is a great build tool. Asset Rack is not a build a tool. It never writes\nfiles to disk, there is no \"build step\". Everything happens \"just in time\".\n\nIf you have \"genuine\" build issues, then by all means use Grunt. You can even\nuse Grunt with Asset Rack.\n\nHowever, if you are only using Grunt to manage your static assets, then you\nshould consider upgrading to Asset Rack.\n\n#### **Why is this better than Wintersmith(Blacksmith)?**\n\nAsset Rack is a static web framework, and at it's core there are only two\nabstractions, the `Asset` and `Rack` classes. Wintersmith is a high level\nframework that solves a more specific problem.\n\nWintersmith could consume Asset Rack as a dependency, and if something more\nhigh-level fits your specific use case, then by all means that is probably a\ngood fit. If you need more flexibilty and power, then go with Asset Rack.\n\n# Changelog\n\n### 2.2.1\n\n  * A few small tweaks.\n\n### 2.2.0\n\n  * Watch and asset recreation is now working. This should be considered experimental for this version.\n    \n    \n    new StylusAsset({\n        watch: true,\n        ...\n    });\n\n  * Gzip is here finally.\n    \n    \n    new BrowserifyAsset({\n        gzip: true,\n        ...\n    });\n\n  * Now adding sub assets to an asset is much simpler, just use `addAsset`.\n    \n    \n    this.addAsset(asset);\n    this.emit('created');\n\nThanks @moellenbeck, @d1plo1d, @undashes, and @noc7c9 for contributing!\n\n### 2.1.4\n\n  * @vicapow Better error handling for `LessAsset`.\n\n### 2.1.3\n\n  * @noc7c9 Added generalized `rack.util.walk` function, need to document the function.\n  * @noc7c9 Added `DynamicAssets` class.\n  * @noc7c9 is awesome.\n\n### 2.1.2\n\n  * Added ability to configure Stylus, thanks to @noc7c9.\n    \n    \n    new StylusAsset\n      url: '/style.css'\n      filename: __dirname + '/style/fun.styl'\n      config: ->\n        @use bootstrap()\n        @define 'setting', 90\n\nAnd for javascript:\n\n    \n    \n    new StylusAsset({\n      url: '/style.css',\n      filename: __dirname + '/style/fun.styl',\n      config: function (stylus) {\n        stylus // using \"this\" here seems a little unnatural\n          .use(bootstrap())\n          .define('setting', 90);\n      }\n    });\n\n# Test\n\nTesting is easy and fun!\n\n    \n    \n    cd asset-rack\n    npm install\n    npm test\n\n# License\n\n\u00a92012 Brad Carleton, Tech Pines and available under the MIT license:\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n", "last_crawled_at": "2015-10-30T17:24:22.664000", "git_url": "git://github.com/techpines/asset-rack.git", "open_issues": 58, "forks": 61, "id": 4876139, "size": 1144}},{"_index":"fosshelper","_type":"repos","_id":"56340a33c97470d7feb481c3","_score":0.13194956,"_source":{"watchers": 3279, "name": "appjs", "language": "C++", "source": "github", "created_at": "2012-03-28T10:01:56", "description": "(Deprecated!) SDK on top of nodejs to build desktop apps using HTML5/CSS/JS", "html_url": "https://github.com/appjs/appjs", "owner": {"url": "https://api.github.com/users/appjs", "avatar_url": "https://avatars.githubusercontent.com/u/1906708?v=3", "type": "Organization"}, "updated_at": "2015-10-30T07:21:17", "readme": "###  README.md\n\n# Attention\n\nAppJS project has not been actively developed for several months. However\nownership of the project has now changed and the future is being discussed.\n\nAn offshoot project deskshell has been very actively developed. It is a\njavascript based SDK for building applications that uses an off the shelf\nnodejs and chromium to build html5 / css / js applications.\n\nThe future will probably involve appjs being able to be run stand alone or as\na frontend to deskshell. Please contribute to the discussions on our mailing\nlist: https://groups.google.com/forum/#!forum/appjs-dev\n\n# AppJS\n\nAppJS is an SDK to develop desktop applications using Node.js melded with\nChromium. With AppJS you can develop desktop tools and applications using the\nsame libraries and knowledge used to build websites. You get all the following\nin one package:\n\n  * JS, HTML5, CSS, SVG, WebGL provided by Chromium\n  * mature http/https servers and client APIs - Node\n  * filesystem, dns, cryptography, subprocesses, OS APIs - Node\n  * sandboxed code execution environments virtual machines - Node\n  * tools for exposing native C++ bindings to JavaScript- Node\n\n* * *\n\n  * **Site: appjs.com**\n  * **Google+**\n  * **Mailing List: mailing list**\n  * **IRC: #appjs at irc.freenode.net**\n\n## 30 Second Quickstart\n\nThe below packages include everything needed to get started with AppJS,\nincluding Node.js, all dependencies, binaries, and a launcher ready to go out\nof the box. 1.) Extract to a folder. 2.) Double click on launch. 3.) Hello\nWorld.\n\n**AppJS 0.0.20 Distributables:**\n\n  * Linux 32 bit / 64 bit -&gt; app.sh\n  * Mac -&gt; app.sh\n  * Windows -&gt; app.exe\n\n**npm install** _OS X install is currently broken_\n\nAppJS can be now be installed via npm.\n\n    \n    \n    npm install appjs\n    \n\n**AppJS requires 32bit Node on OS X**. It works on 64bit OS X but **Node must be 32bit**. We're working on solving this, but it's a limitation of Chrome itself so it's a work in progress. Help us gain traction by starring this chromium issue.\n\n(Windows requires MSVC++ 2010 runtimes)\n\n## One Minute Usage Overview\n\n    \n    \n    var app = module.exports = require('appjs');\n    \n    app.serveFilesFrom(__dirname + '/content');\n    \n    var window = app.createWindow({\n      width  : 640,\n      height : 460,\n      icons  : __dirname + '/content/icons'\n    });\n    \n    window.on('create', function(){\n      console.log(\"Window Created\");\n      window.frame.show();\n      window.frame.center();\n    });\n    \n    window.on('ready', function(){\n      console.log(\"Window Ready\");\n      window.require = require;\n      window.process = process;\n      window.module = module;\n      window.addEventListener('keydown', function(e){\n        if (e.keyIdentifier === 'F12') {\n          window.frame.openDevTools();\n        }\n      });\n    });\n    \n    window.on('close', function(){\n      console.log(\"Window Closed\");\n    });\n\n## Shared Contexts\n\n![chrome-in-node-repl](https://github.com/appjs/appjs/raw/master/examples\n/chrome-in-node-repl.jpg)\n\n![DOM Event Listener in\nNode](https://github.com/appjs/appjs/raw/master/examples/shared-context.jpg)\n\n## License\n\nThe MIT License\n\nCopyright (c) 2012 The AppJS Authors\n\nSee the LICENSE file for details.\n\n", "last_crawled_at": "2015-10-30T17:24:16.873000", "git_url": "git://github.com/appjs/appjs.git", "open_issues": 165, "forks": 371, "id": 3853751, "size": 8440}},{"_index":"fosshelper","_type":"repos","_id":"56340a7fc97470d7feb48523","_score":0.09054488,"_source":{"watchers": 6291, "name": "UglifyJS", "language": "JavaScript", "source": "github", "created_at": "2010-08-15T11:51:16", "description": "JavaScript parser / mangler / compressor / beautifier library for NodeJS", "html_url": "https://github.com/mishoo/UglifyJS", "owner": {"url": "https://api.github.com/users/mishoo", "avatar_url": "https://avatars.githubusercontent.com/u/334725?v=3", "type": "User"}, "updated_at": "2015-10-31T00:14:27", "readme": "###  README.org\n\n# UglifyJS \u2013 a JavaScript parser/compressor/beautifier\n\n# NEW: UglifyJS2\n\nI started working on UglifyJS\u2019s successor, version 2. It\u2019s almost a full\nrewrite (except for the parser which is heavily modified, everything else\nstarts from scratch). I\u2019ve detailed my reasons in the README, see the project\npage.\n\nhttps://github.com/mishoo/UglifyJS2\n\nVersion 1 will continue to be maintained for fixing show-stopper bugs, but no\nnew features should be expected.\n\n# UglifyJS \u2014 a JavaScript parser/compressor/beautifier\n\nThis package implements a general-purpose JavaScript\nparser/compressor/beautifier toolkit. It is developed on NodeJS, but it should\nwork on any JavaScript platform supporting the CommonJS module system (and if\nyour platform of choice doesn\u2019t support CommonJS, you can easily implement it,\nor discard the `exports.*` lines from UglifyJS sources).\n\nThe tokenizer/parser generates an abstract syntax tree from JS code. You can\nthen traverse the AST to learn more about the code, or do various\nmanipulations on it. This part is implemented in parse-js.js and it\u2019s a port\nto JavaScript of the excellent parse-js Common Lisp library from Marijn\nHaverbeke.\n\n( See cl-uglify-js if you\u2019re looking for the Common Lisp version of UglifyJS.\n)\n\nThe second part of this package, implemented in process.js, inspects and\nmanipulates the AST generated by the parser to provide the following:\n\n  * ability to re-generate JavaScript code from the AST. Optionally indented\u2014you can use this if you want to \u201cbeautify\u201d a program that has been compressed, so that you can inspect the source. But you can also run our code generator to print out an AST without any whitespace, so you achieve compression as well.\n  * shorten variable names (usually to single characters). Our mangler will analyze the code and generate proper variable names, depending on scope and usage, and is smart enough to deal with globals defined elsewhere, or with `eval()` calls or `with{}` statements. In short, if `eval()` or `with{}` are used in some scope, then all variables in that scope and any variables in the parent scopes will remain unmangled, and any references to such variables remain unmangled as well.\n  * various small optimizations that may lead to faster code but certainly lead to smaller code. Where possible, we do the following: \n    * foo[\u201cbar\u201d] ==&gt; foo.bar\n    * remove block brackets `{}`\n    * join consecutive var declarations: var a = 10; var b = 20; ==&gt; var a=10,b=20;\n    * resolve simple constant expressions: 1 +2 * 3 ==&gt; 7\\. We only do the replacement if the result occupies less bytes; for example 1/3 would translate to 0.333333333333, so in this case we don\u2019t replace it.\n    * consecutive statements in blocks are merged into a sequence; in many cases, this leaves blocks with a single statement, so then we can remove the block brackets.\n    * various optimizations for IF statements: \n      * if (foo) bar(); else baz(); ==&gt; foo?bar():baz();\n      * if (!foo) bar(); else baz(); ==&gt; foo?baz():bar();\n      * if (foo) bar(); ==&gt; foo&amp;&amp;bar();\n      * if (!foo) bar(); ==&gt; foo||bar();\n      * if (foo) return bar(); else return baz(); ==&gt; return foo?bar():baz();\n      * if (foo) return bar(); else something(); ==&gt; {if(foo)return bar();something()}\n    * remove some unreachable code and warn about it (code that follows a `return`, `throw`, `break` or `continue` statement, except function/variable declarations).\n    * act a limited version of a pre-processor (c.f. the pre-processor of C/C++) to allow you to safely replace selected global symbols with specified values. When combined with the optimisations above this can make UglifyJS operate slightly more like a compilation process, in that when certain symbols are replaced by constant values, entire code blocks may be optimised away as unreachable.\n\n## &lt;&lt;Unsafe transformations&gt;&gt;\n\nThe following transformations can in theory break code, although they\u2019re\nprobably safe in most practical cases. To enable them you need to pass the\n`--unsafe` flag.\n\n### Calls involving the global Array constructor\n\nThe following transformations occur:\n\n    \n    \n    new Array(1, 2, 3, 4)  => [1,2,3,4]\n    Array(a, b, c)         => [a,b,c]\n    new Array(5)           => Array(5)\n    new Array(a)           => Array(a)\n\nThese are all safe if the Array name isn\u2019t redefined. JavaScript does allow\none to globally redefine Array (and pretty much everything, in fact) but I\npersonally don\u2019t see why would anyone do that.\n\nUglifyJS does handle the case where Array is redefined locally, or even\nglobally but with a `function` or `var` declaration. Therefore, in the\nfollowing cases UglifyJS **doesn\u2019t touch** calls or instantiations of Array:\n\n    \n    \n    // case 1.  globally declared variable\n      var Array;\n      new Array(1, 2, 3);\n      Array(a, b);\n    \n      // or (can be declared later)\n      new Array(1, 2, 3);\n      var Array;\n    \n      // or (can be a function)\n      new Array(1, 2, 3);\n      function Array() { ... }\n    \n    // case 2.  declared in a function\n      (function(){\n        a = new Array(1, 2, 3);\n        b = Array(5, 6);\n        var Array;\n      })();\n    \n      // or\n      (function(Array){\n        return Array(5, 6, 7);\n      })();\n    \n      // or\n      (function(){\n        return new Array(1, 2, 3, 4);\n        function Array() { ... }\n      })();\n    \n      // etc.\n\n### `obj.toString()` ==&gt; `obj+\u201c\u201d`\n\n## Install (NPM)\n\nUglifyJS is now available through NPM \u2014 `npm install uglify-js@1` should do\nthe job.\n\n**NOTE:** The NPM package has been upgraded to UglifyJS2. If you need to install version 1.x you need to add `@1` to the command, as I did above. I strongly suggest you to try to upgrade, though this might not be simple (v2 has a completely different AST structure and API).\n\n## Install latest code from GitHub\n\n    \n    \n    ## clone the repository\n    mkdir -p /where/you/wanna/put/it\n    cd /where/you/wanna/put/it\n    git clone git://github.com/mishoo/UglifyJS.git\n    \n    ## make the module available to Node\n    mkdir -p ~/.node_libraries/\n    cd ~/.node_libraries/\n    ln -s /where/you/wanna/put/it/UglifyJS/uglify-js.js\n    \n    ## and if you want the CLI script too:\n    mkdir -p ~/bin\n    cd ~/bin\n    ln -s /where/you/wanna/put/it/UglifyJS/bin/uglifyjs\n      # (then add ~/bin to your $PATH if it's not there already)\n\n## Usage\n\nThere is a command-line tool that exposes the functionality of this library\nfor your shell-scripting needs:\n\n    \n    \n    uglifyjs [ options... ] [ filename ]\n\n`filename` should be the last argument and should name the file from which to\nread the JavaScript code. If you don\u2019t specify it, it will read code from\nSTDIN.\n\nSupported options:\n\n  * `-b` or `--beautify` \u2014 output indented code; when passed, additional options control the beautifier: \n    * `-i N` or `--indent N` \u2014 indentation level (number of spaces)\n    * `-q` or `--quote-keys` \u2014 quote keys in literal objects (by default, only keys that cannot be identifier names will be quotes).\n  * `-c` or `----consolidate-primitive-values` \u2014 consolidates null, Boolean, and String values. Known as aliasing in the Closure Compiler. Worsens the data compression ratio of gzip.\n  * `--ascii` \u2014 pass this argument to encode non-ASCII characters as `\\uXXXX` sequences. By default UglifyJS won\u2019t bother to do it and will output Unicode characters instead. (the output is always encoded in UTF8, but if you pass this option you\u2019ll only get ASCII).\n  * `-nm` or `--no-mangle` \u2014 don\u2019t mangle names.\n  * `-nmf` or `--no-mangle-functions` \u2013 in case you want to mangle variable names, but not touch function names.\n  * `-ns` or `--no-squeeze` \u2014 don\u2019t call `ast_squeeze()` (which does various optimizations that result in smaller, less readable code).\n  * `-mt` or `--mangle-toplevel` \u2014 mangle names in the toplevel scope too (by default we don\u2019t do this).\n  * `--no-seqs` \u2014 when `ast_squeeze()` is called (thus, unless you pass `--no-squeeze`) it will reduce consecutive statements in blocks into a sequence. For example, \u201ca = 10; b = 20; foo();\u201d will be written as \u201ca=10,b=20,foo();\u201d. In various occasions, this allows us to discard the block brackets (since the block becomes a single statement). This is ON by default because it seems safe and saves a few hundred bytes on some libs that I tested it on, but pass `--no-seqs` to disable it.\n  * `--no-dead-code` \u2014 by default, UglifyJS will remove code that is obviously unreachable (code that follows a `return`, `throw`, `break` or `continue` statement and is not a function/variable declaration). Pass this option to disable this optimization.\n  * `-nc` or `--no-copyright` \u2014 by default, `uglifyjs` will keep the initial comment tokens in the generated code (assumed to be copyright information etc.). If you pass this it will discard it.\n  * `-o filename` or `--output filename` \u2014 put the result in `filename`. If this isn\u2019t given, the result goes to standard output (or see next one).\n  * `--overwrite` \u2014 if the code is read from a file (not from STDIN) and you pass `--overwrite` then the output will be written in the same file.\n  * `--ast` \u2014 pass this if you want to get the Abstract Syntax Tree instead of JavaScript as output. Useful for debugging or learning more about the internals.\n  * `-v` or `--verbose` \u2014 output some notes on STDERR (for now just how long each operation takes).\n  * `-d SYMBOL[=VALUE]` or `--define SYMBOL[=VALUE]` \u2014 will replace all instances of the specified symbol where used as an identifier (except where symbol has properly declared by a var declaration or use as function parameter or similar) with the specified value. This argument may be specified multiple times to define multiple symbols - if no value is specified the symbol will be replaced with the value `true`, or you can specify a numeric value (such as `1024`), a quoted string value (such as =\u201dobject\u201d= or =\u2019https://github.com\u2019`), or the name of another symbol or keyword (such as =null` or `document`). This allows you, for example, to assign meaningful names to key constant values but discard the symbolic names in the uglified version for brevity/efficiency, or when used wth care, allows UglifyJS to operate as a form of **conditional compilation** whereby defining appropriate values may, by dint of the constant folding and dead code removal features above, remove entire superfluous code blocks (e.g. completely remove instrumentation or trace code for production use). Where string values are being defined, the handling of quotes are likely to be subject to the specifics of your command shell environment, so you may need to experiment with quoting styles depending on your platform, or you may find the option `--define-from-module` more suitable for use.\n  * `-define-from-module SOMEMODULE` \u2014 will load the named module (as per the NodeJS `require()` function) and iterate all the exported properties of the module defining them as symbol names to be defined (as if by the `--define` option) per the name of each property (i.e. without the module name prefix) and given the value of the property. This is a much easier way to handle and document groups of symbols to be defined rather than a large number of `--define` options.\n  * `--unsafe` \u2014 enable other additional optimizations that are known to be unsafe in some contrived situations, but could still be generally useful. For now only these: \n    * foo.toString() ==&gt; foo+\u201d\u201d\n    * new Array(x,\u2026) ==&gt; [x,\u2026]\n    * new Array(x) ==&gt; Array(x)\n  * `--max-line-len` (default 32K characters) \u2014 add a newline after around 32K characters. I\u2019ve seen both FF and Chrome croak when all the code was on a single line of around 670K. Pass \u2013max-line-len 0 to disable this safety feature.\n  * `--reserved-names` \u2014 some libraries rely on certain names to be used, as pointed out in issue #92 and #81, so this option allow you to exclude such names from the mangler. For example, to keep names `require` and `$super` intact you\u2019d specify \u2013reserved-names \u201crequire,$super\u201d.\n  * `--inline-script` \u2013 when you want to include the output literally in an HTML `<script>` tag you can use this option to prevent `</script` from showing up in the output.\n  * `--lift-vars` \u2013 when you pass this, UglifyJS will apply the following transformations (see the notes in API, `ast_lift_variables`): \n    * put all `var` declarations at the start of the scope\n    * make sure a variable is declared only once\n    * discard unused function arguments\n    * discard unused inner (named) functions\n    * finally, try to merge assignments into that one `var` declaration, if possible.\n\n### API\n\nTo use the library from JavaScript, you\u2019d do the following (example for\nNodeJS):\n\n    \n    \n    var jsp = require(\"uglify-js\").parser;\n    var pro = require(\"uglify-js\").uglify;\n    \n    var orig_code = \"... JS code here\";\n    var ast = jsp.parse(orig_code); // parse code and get the initial AST\n    ast = pro.ast_mangle(ast); // get a new AST with mangled names\n    ast = pro.ast_squeeze(ast); // get an AST with compression optimizations\n    var final_code = pro.gen_code(ast); // compressed code here\n\nThe above performs the full compression that is possible right now. As you can\nsee, there are a sequence of steps which you can apply. For example if you\nwant compressed output but for some reason you don\u2019t want to mangle variable\nnames, you would simply skip the line that calls `pro.ast_mangle(ast)`.\n\nSome of these functions take optional arguments. Here\u2019s a description:\n\n  * `jsp.parse(code, strict_semicolons)` \u2013 parses JS code and returns an AST. `strict_semicolons` is optional and defaults to `false`. If you pass `true` then the parser will throw an error when it expects a semicolon and it doesn\u2019t find it. For most JS code you don\u2019t want that, but it\u2019s useful if you want to strictly sanitize your code.\n  * `pro.ast_lift_variables(ast)` \u2013 merge and move `var` declarations to the scop of the scope; discard unused function arguments or variables; discard unused (named) inner functions. It also tries to merge assignments following the `var` declaration into it. \n\nIf your code is very hand-optimized concerning `var` declarations, this\nlifting variable declarations might actually increase size. For me it helps\nout. On jQuery it adds 865 bytes (243 after gzip). YMMV. Also note that (since\nit\u2019s not enabled by default) this operation isn\u2019t yet heavily tested (please\nreport if you find issues!).\n\nNote that although it might increase the image size (on jQuery it gains 865\nbytes, 243 after gzip) it\u2019s technically more correct: in certain situations,\ndead code removal might drop variable declarations, which would not happen if\nthe variables are lifted in advance.\n\nHere\u2019s an example of what it does:\n\n    \n    \n    function f(a, b, c, d, e) {\n        var q;\n        var w;\n        w = 10;\n        q = 20;\n        for (var i = 1; i < 10; ++i) {\n            var boo = foo(a);\n        }\n        for (var i = 0; i < 1; ++i) {\n            var boo = bar(c);\n        }\n        function foo(){ ... }\n        function bar(){ ... }\n        function baz(){ ... }\n    }\n    \n    // transforms into ==>\n    \n    function f(a, b, c) {\n        var i, boo, w = 10, q = 20;\n        for (i = 1; i < 10; ++i) {\n            boo = foo(a);\n        }\n        for (i = 0; i < 1; ++i) {\n            boo = bar(c);\n        }\n        function foo() { ... }\n        function bar() { ... }\n    }\n\n  * `pro.ast_mangle(ast, options)` \u2013 generates a new AST containing mangled (compressed) variable and function names. It supports the following options: \n    * `toplevel` \u2013 mangle toplevel names (by default we don\u2019t touch them).\n    * `except` \u2013 an array of names to exclude from compression.\n    * `defines` \u2013 an object with properties named after symbols to replace (see the `--define` option for the script) and the values representing the AST replacement value. For example, `{ defines: { DEBUG: ['name', 'false'], VERSION: ['string', '1.0'] } }`\n  * `pro.ast_squeeze(ast, options)` \u2013 employs further optimizations designed to reduce the size of the code that `gen_code` would generate from the AST. Returns a new AST. `options` can be a hash; the supported options are: \n    * `make_seqs` (default true) which will cause consecutive statements in a block to be merged using the \u201csequence\u201d (comma) operator\n    * `dead_code` (default true) which will remove unreachable code.\n  * `pro.gen_code(ast, options)` \u2013 generates JS code from the AST. By default it\u2019s minified, but using the `options` argument you can get nicely formatted output. `options` is, well, optional :-) and if you pass it it must be an object and supports the following properties (below you can see the default values): \n    * `beautify: false` \u2013 pass `true` if you want indented output\n    * `indent_start: 0` (only applies when `beautify` is `true`) \u2013 initial indentation in spaces\n    * `indent_level: 4` (only applies when `beautify` is `true`) \u2013 indentation level, in spaces (pass an even number)\n    * `quote_keys: false` \u2013 if you pass `true` it will quote all keys in literal objects\n    * `space_colon: false` (only applies when `beautify` is `true`) \u2013 wether to put a space before the colon in object literals\n    * `ascii_only: false` \u2013 pass `true` if you want to encode non-ASCII characters as `\\uXXXX`.\n    * `inline_script: false` \u2013 pass `true` to escape occurrences of `</script` in strings\n\n### Beautifier shortcoming \u2013 no more comments\n\nThe beautifier can be used as a general purpose indentation tool. It\u2019s useful\nwhen you want to make a minified file readable. One limitation, though, is\nthat it discards all comments, so you don\u2019t really want to use it to reformat\nyour code, unless you don\u2019t have, or don\u2019t care about, comments.\n\nIn fact it\u2019s not the beautifier who discards comments \u2014 they are dumped at the\nparsing stage, when we build the initial AST. Comments don\u2019t really make sense\nin the AST, and while we could add nodes for them, it would be inconvenient\nbecause we\u2019d have to add special rules to ignore them at all the processing\nstages.\n\n### Use as a code pre-processor\n\nThe `--define` option can be used, particularly when combined with the\nconstant folding logic, as a form of pre-processor to enable or remove\nparticular constructions, such as might be used for instrumenting development\ncode, or to produce variations aimed at a specific platform.\n\nThe code below illustrates the way this can be done, and how the symbol\nreplacement is performed.\n\n    \n    \n    CLAUSE1: if (typeof DEVMODE === 'undefined') {\n        DEVMODE = true;\n    }\n    \n    CLAUSE2: function init() {\n        if (DEVMODE) {\n            console.log(\"init() called\");\n        }\n        ....\n        DEVMODE &amp;&amp; console.log(\"init() complete\");\n    }\n    \n    CLAUSE3: function reportDeviceStatus(device) {\n        var DEVMODE = device.mode, DEVNAME = device.name;\n        if (DEVMODE === 'open') {\n            ....\n        }\n    }\n\nWhen the above code is normally executed, the undeclared global variable\n`DEVMODE` will be assigned the value **true** (see `CLAUSE1`) and so the\n`init()` function (`CLAUSE2`) will write messages to the console log when\nexecuted, but in `CLAUSE3` a locally declared variable will mask access to the\n`DEVMODE` global symbol.\n\nIf the above code is processed by UglifyJS with an argument of `--define\nDEVMODE=false` then UglifyJS will replace `DEVMODE` with the boolean constant\nvalue **false** within `CLAUSE1` and `CLAUSE2`, but it will leave `CLAUSE3` as\nit stands because there `DEVMODE` resolves to a validly declared variable.\n\nAnd more so, the constant-folding features of UglifyJS will recognise that the\n`if` condition of `CLAUSE1` is thus always false, and so will remove the test\nand body of `CLAUSE1` altogether (including the otherwise slightly\nproblematical statement `false = true;` which it will have formed by replacing\n`DEVMODE` in the body). Similarly, within `CLAUSE2` both calls to\n`console.log()` will be removed altogether.\n\nIn this way you can mimic, to a limited degree, the functionality of the C/C++\npre-processor to enable or completely remove blocks depending on how certain\nsymbols are defined - perhaps using UglifyJS to generate different versions of\nsource aimed at different environments\n\nIt is recommmended (but not made mandatory) that symbols designed for this\npurpose are given names consisting of `UPPER_CASE_LETTERS` to distinguish them\nfrom other (normal) symbols and avoid the sort of clash that `CLAUSE3` above\nillustrates.\n\n## Compression \u2013 how good is it?\n\nHere are updated statistics. (I also updated my Google Closure and YUI\ninstallations).\n\nWe\u2019re still a lot better than YUI in terms of compression, though slightly\nslower. We\u2019re still a lot faster than Closure, and compression after gzip is\ncomparable.\n\nFile| UglifyJS| UglifyJS+gzip| Closure| Closure+gzip| YUI| YUI+gzip  \n---|---|---|---|---|---|---  \njquery-1.6.2.js| 91001 (0:01.59)| 31896| 90678 (0:07.40)| 31979| 101527\n(0:01.82)| 34646  \npaper.js| 142023 (0:01.65)| 43334| 134301 (0:07.42)| 42495| 173383 (0:01.58)|\n48785  \nprototype.js| 88544 (0:01.09)| 26680| 86955 (0:06.97)| 26326| 92130 (0:00.79)|\n28624  \nthelib-full.js (DynarchLIB)| 251939 (0:02.55)| 72535| 249911 (0:09.05)| 72696|\n258869 (0:01.94)| 76584  \n  \n## Bugs?\n\nUnfortunately, for the time being there is no automated test suite. But I ran\nthe compressor manually on non-trivial code, and then I tested that the\ngenerated code works as expected. A few hundred times.\n\nDynarchLIB was started in times when there was no good JS minifier. Therefore\nI was quite religious about trying to write short code manually, and as such\nDL contains a lot of syntactic hacks[1] such as \u201cfoo == bar ? a = 10 : b =\n20\u201d, though the more readable version would clearly be to use \u201cif/else\u201d.\n\nSince the parser/compressor runs fine on DL and jQuery, I\u2019m quite confident\nthat it\u2019s solid enough for production use. If you can identify any bugs, I\u2019d\nlove to hear about them (use the Google Group or email me directly).\n\n[1] I even reported a few bugs and suggested some fixes in the original parse-\njs library, and Marijn pushed fixes literally in minutes.\n\n## Links\n\n  * Twitter: @UglifyJS\n  * Project at GitHub: http://github.com/mishoo/UglifyJS\n  * Google Group: http://groups.google.com/group/uglifyjs\n  * Common Lisp JS parser: http://marijn.haverbeke.nl/parse-js/\n  * JS-to-Lisp compiler: http://github.com/marijnh/js\n  * Common Lisp JS uglifier: http://github.com/mishoo/cl-uglify-js\n\n## License\n\nUglifyJS is released under the BSD license:\n\n    \n    \n    Copyright 2010 (c) Mihai Bazon <mihai.bazon@gmail.com>\n    Based on parse-js (http://marijn.haverbeke.nl/parse-js/).\n    \n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n    \n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n    \n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n    \n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER \u201cAS IS\u201d AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n    \n\n", "last_crawled_at": "2015-10-30T17:24:16.870000", "git_url": "git://github.com/mishoo/UglifyJS.git", "open_issues": 150, "forks": 576, "id": 839076, "size": 1915}},{"_index":"fosshelper","_type":"repos","_id":"56340a37c97470d7feb481df","_score":0.06417868,"_source":{"watchers": 516, "name": "swagger-js", "language": "JavaScript", "source": "github", "created_at": "2012-02-16T00:08:43", "description": "Javascript library to connect to swagger-enabled APIs via browser or nodejs", "html_url": "https://github.com/swagger-api/swagger-js", "owner": {"url": "https://api.github.com/users/swagger-api", "avatar_url": "https://avatars.githubusercontent.com/u/7658037?v=3", "type": "Organization"}, "updated_at": "2015-10-29T01:56:36", "readme": "###  README.md\n\n# Swagger JS library\n\n![Build Status](https://camo.githubusercontent.com/8735ef2be48a53ada2fe1346bb3\n4c1363147ae13/68747470733a2f2f7472617669732d63692e6f72672f737761676765722d6170\n692f737761676765722d6a732e7376673f6272616e63683d6d6173746572)\n\nThis is the Swagger javascript client for use with swagger enabled APIs. It's\nwritten in javascript and tested with mocha, and is the fastest way to enable\na javascript client to communicate with a swagger-enabled server.\n\nCheck out Swagger-Spec for additional information about the Swagger project,\nincluding additional libraries with support for other languages and more.\n\n### Calling an API with swagger + node.js!\n\nInstall swagger-client:\n\n    \n    \n    npm install swagger-client\n    \n\nor:\n\n    \n    \n    bower install swagger-js\n    \n\nThen let swagger do the work!\n\n    \n    \n    var client = require('swagger-client');\n    \n    var swagger = new client({\n      url: 'http://petstore.swagger.io/v2/swagger.json',\n      success: function() {\n        swagger.pet.getPetById({petId:7},{responseContentType: 'application/json'},function(pet){\n          console.log('pet', pet);\n        });\n      }\n    });\n\nNOTE: we're explicitly setting the responseContentType, because we don't want\nyou getting stuck when there is more than one content type available.\n\nThat's it! You'll get a JSON response with the default callback handler:\n\n    \n    \n    {\n      \"id\": 1,\n      \"category\": {\n        \"id\": 2,\n        \"name\": \"Cats\"\n      },\n      \"name\": \"Cat 1\",\n      \"photoUrls\": [\n        \"url1\",\n        \"url2\"\n      ],\n      \"tags\": [\n        {\n          \"id\": 1,\n          \"name\": \"tag1\"\n        },\n        {\n          \"id\": 2,\n          \"name\": \"tag2\"\n        }\n      ],\n      \"status\": \"available\"\n    }\n\nNeed to pass an API key? Configure one as a querystring:\n\n    \n    \n    client.clientAuthorizations.add(\"apiKey\", new client.ApiKeyAuthorization(\"api_key\",\"special-key\",\"query\"));\n\n...or with a header:\n\n    \n    \n    client.clientAuthorizations.add(\"apiKey\", new client.ApiKeyAuthorization(\"api_key\",\"special-key\",\"header\"));\n\n...or with the swagger-client constructor:\n\n    \n    \n    var swagger = new client({\n      url: 'http://example.com/spec.json',\n      success: function() {},\n      authorizations : {\n        easyapi_basic: new client.PasswordAuthorization('<username>', '<password>'),\n        someHeaderAuth: new client.ApiKeyAuthorization('<nameOfHeader>', '<value>', 'header'),\n        someQueryAuth: new client.ApiKeyAuthorization('<nameOfQueryKey>', '<value>', 'query'),\n        someCookieAuth: new client.CookieAuthorization('<cookie>'),\n      }\n    });\n\n### Calling an API with swagger + the browser!\n\nDownload `browser/swagger-client.js` into your webapp:\n\n    \n    \n    <script src='browser/swagger-client.js' type='text/javascript'></script>\n    <script type=\"text/javascript\">\n      // initialize swagger, point to a resource listing\n      window.swagger = new SwaggerClient({\n        url: \"http://petstore.swagger.io/api/api-docs\",\n        success: function() {\n          // upon connect, fetch a pet and set contents to element \"mydata\"\n          swagger.apis.pet.getPetById({petId:1},{responseContentType: 'application/json'}, function(data) {\n            document.getElementById(\"mydata\").innerHTML = JSON.stringify(data.obj);\n          });\n        }\n      });\n    </script>\n    \n    <body>\n      <div id=\"mydata\"></div>\n    </body>\n\n### Need to send an object to your API via POST or PUT?\n\n    \n    \n    var pet = {\n      id: 100,\n      name: \"dog\"};\n    \n    swagger.pet.addPet({body: pet});\n\n### Sending XML in as a payload to your API?\n\n    \n    \n    var pet = \"<Pet><id>2</id><name>monster</name></Pet>\";\n    \n    swagger.pet.addPet({body: pet}, {requestContentType:\"application/xml\"});\n\n### Need XML response?\n\n    \n    \n    swagger.pet.getPetById({petId:1}, {responseContentType:\"application/xml\"});\n\n### Custom request signing\n\nYou can easily write your own request signing code for Swagger. For example:\n\n    \n    \n    var CustomRequestSigner = function(name) {\n      this.name = name;\n    };\n    \n    CustomRequestSigner.prototype.apply = function(obj, authorizations) {\n      var hashFunction = this._btoa;\n      var hash = hashFunction(obj.url);\n    \n      obj.headers[\"signature\"] = hash;\n      return true;\n    };\n\nIn the above simple example, we're creating a new request signer that simply\nbase 64 encodes the URL. Of course you'd do something more sophisticated, but\nafter encoding it, a header called `signature` is set before sending the\nrequest.\n\n### How does it work?\n\nThe swagger javascript client reads the swagger api definition directly from\nthe server. As it does, it constructs a client based on the api definition,\nwhich means it is completely dynamic. It even reads the api text descriptions\n(which are intended for humans!) and provides help if you need it:\n\n    \n    \n    s.apis.pet.getPetById.help()\n    '* petId (required) - ID of pet that needs to be fetched'\n\nThe HTTP requests themselves are handled by the excellent shred library, which\nhas a ton of features itself. But it runs on both node and the browser.\n\n## Development\n\nPlease fork the code and help us improve swagger-client.js. Send us a pull\nrequest to the `master` branch! Tests make merges get accepted more quickly.\n\nswagger-js use gulp for Node.js.\n\n    \n    \n    # Install the gulp client on the path\n    npm install -g gulp\n    \n    # Install all project dependencies\n    npm install\n    \n    \n    # List all tasks.\n    gulp -T\n    \n    # Run lint (will not fail if there are errors/warnings), tests (without coverage) and builds the browser binaries\n    gulp\n    \n    # Run the test suite (without coverage)\n    gulp test\n    \n    # Build the browser binaries (One for development with source maps and one that is minified and without source maps) in the browser directory\n    gulp build\n    \n    # Continuously run the test suite:\n    gulp watch\n    \n    # Run jshint report\n    gulp lint\n    \n    # Run a coverage report based on running the unit tests\n    gulp coverage\n\n## License\n\nCopyright 2011-2015 SmartBear Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not\nuse this file except in compliance with the License. You may obtain a copy of\nthe License at apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\nWARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\nLicense for the specific language governing permissions and limitations under\nthe License.\n\n", "last_crawled_at": "2015-10-30T17:24:20.702000", "git_url": "git://github.com/swagger-api/swagger-js.git", "open_issues": 58, "forks": 306, "id": 3455070, "size": 30553}},{"_index":"fosshelper","_type":"repos","_id":"56340a33c97470d7feb481c1","_score":0.058770698,"_source":{"watchers": 2386, "name": "doT", "language": "JavaScript", "source": "github", "created_at": "2011-01-10T20:47:04", "description": "The fastest + concise javascript template engine for nodejs and browsers. Partials, custom delimiters and more. ", "html_url": "https://github.com/olado/doT", "owner": {"url": "https://api.github.com/users/olado", "avatar_url": "https://avatars.githubusercontent.com/u/544390?v=3", "type": "User"}, "updated_at": "2015-10-30T03:28:06", "readme": "###  README.md\n\nCreated in search of the fastest and concise JavaScript templating function\nwith emphasis on performance under V8 and nodejs. It shows great performance\nfor both nodejs and browsers.\n\ndoT.js is fast, small and has no dependencies.\n\n## Features\n\n    \n    \n    custom delimiters\n    runtime evaluation\n    runtime interpolation\n    compile-time evaluation\n    partials support\n    conditionals support\n    array iterators\n    encoding\n    control whitespace - strip or preserve\n    streaming friendly\n    use it as logic-less or with logic, it is up to you\n    \n\n## Docs, live playground and samples\n\nhttp://olado.github.com/doT (todo: update docs with new features added in\nversion 1.0.0)\n\n## New in version 1.0.0\n\n#### Added parameters support in partials\n\n    \n    \n    {{##def.macro:param:\n        <div>{{=param.foo}}</div>\n    #}}\n    \n    {{#def.macro:myvariable}}\n    \n\n#### Node module now supports auto-compilation of dot templates from specified\npath\n\n    \n    \n    var dots = require(\"dot\").process({ path: \"./views\"});\n    \n\nThis will compile .def, .dot, .jst files found under the specified path.\nDetails\n\n  * It ignores sub-directories.\n  * Template files can have multiple extensions at the same time.\n  * Files with .def extension can be included in other files via {{#def.name}}\n  * Files with .dot extension are compiled into functions with the same name and can be accessed as renderer.filename\n  * Files with .jst extension are compiled into .js files. Produced .js file can be loaded as a commonJS, AMD module, or just installed into a global variable (default is set to window.render)\n  * All inline defines defined in the .jst file are compiled into separate functions and are available via _render.filename.definename\n\nBasic usage:\n\n    \n              var dots = require(\"dot\").process({path: \"./views\"});\n          dots.mytemplate({foo:\"hello world\"});\n    \n\nThe above snippet will:\n\n    * Compile all templates in views folder (.dot, .def, .jst)\n    * Place .js files compiled from .jst templates into the same folder These files can be used with require, i.e. require(\"./views/mytemplate\")\n    * Return an object with functions compiled from .dot templates as its properties\n    * Render mytemplate template\n\n#### CLI tool to compile dot templates into js files\n\n    \n    \n    ./bin/dot-packer -s examples/views -d out/views\n    \n\n## Example for express\n\n    \n    \n    Many people are using doT with express. I added an example of the best way of doing it examples/express:\n    \n\ndoT with express\n\n## Notes\n\n    \n    \n    doU.js is here only so that legacy external tests do not break. Use doT.js.\n    doT.js with doT.templateSettings.append=false provides the same performance as doU.js.\n    \n\n## Author\n\nLaura Doktorova @olado\n\n## License\n\ndoT is licensed under the MIT License. (See LICENSE-DOT)\n\n![logo by Kevin Kirchner](https://camo.githubusercontent.com/80cc3ff32a3a765a3\ncab5c17f6fa7ff5ad20250e/687474703a2f2f6f6c61646f2e6769746875622e696f2f646f542f\n646f542d6a732d3130304032782e706e67)\n\nThank you @KevinKirchner for the logo.\n\n", "last_crawled_at": "2015-10-30T17:24:16.874000", "git_url": "git://github.com/olado/doT.git", "open_issues": 96, "forks": 469, "id": 1239398, "size": 827}},{"_index":"fosshelper","_type":"repos","_id":"56340a32c97470d7feb481b5","_score":0.048134014,"_source":{"watchers": 1142, "name": "blanket", "language": "JavaScript", "source": "github", "created_at": "2012-10-12T15:56:29", "description": "blanket.js is a simple code coverage library for javascript.  Designed to be easy to install and use, for both browser and nodejs.", "html_url": "https://github.com/alex-seville/blanket", "owner": {"url": "https://api.github.com/users/alex-seville", "avatar_url": "https://avatars.githubusercontent.com/u/1172331?v=3", "type": "User"}, "updated_at": "2015-10-29T15:19:09", "readme": "###  README.md\n\n# Blanket.js\n\nA seamless JavaScript code coverage library.\n\nProject home page  \nBlanket_js on Twitter for updates and news.\n\n**NOTE: All Pull-Requests must be made into the `master` branch.**\n\n![Build Status](https://camo.githubusercontent.com/4aa3a827019926b4e9a6b877158\ndda0bcf0d6c20/68747470733a2f2f7472617669732d63692e6f72672f616c65782d736576696c\n6c652f626c616e6b65742e737667) ![Dependency Status](https://camo.githubusercont\nent.com/5c619de37ef48d0a7c263baa55e53eb41c99606d/68747470733a2f2f64617669642d6\n46d2e6f72672f616c65782d736576696c6c652f626c616e6b65742e737667) ![devDependency\nStatus](https://camo.githubusercontent.com/c735835b433c20372f5788b25705e4f1a0e\na16fd/68747470733a2f2f64617669642d646d2e6f72672f616c65782d736576696c6c652f626c\n616e6b65742f6465762d7374617475732e737667)\n\n  * Getting Started\n  * Philosophy\n  * Mechanism\n  * Grunt Integration\n  * Compatibility &amp; Features List\n  * Roll Your Own\n  * Development\n  * Contact\n  * Contributors  \n\n  * Roadmap\n  * Revision History\n\n**NOTE:** Blanket.js will throw XHR cross domain errors if run with the file:// protocol. See Special Features Guide for more details and workarounds.\n\n## Getting Started\n\nPlease see the following guides for using Blanket.js:\n\n**Browser**\n\n  * Getting Started (Basic QUnit usage)\n  * Intermediate (Other test runners, global options)\n  * Advanced (writing your own reporters/adapters)\n  * Special Features Guide\n\n**Node**\n\n  * Getting Started (basic mocha setup)\n  * Intermediate (mocha testrunner, travis-ci reporter)\n  * Intermediate 2 (mocha, htmlcov, package.json setup)\n\n**Configuration**\n\n  * Options (Browser and Node)\n\n## Philosophy\n\nBlanket.js is a code coverage tool for javascript that aims to be:\n\n  1. Easy to install\n  2. Easy to use\n  3. Easy to understand\n\nBlanket.js can be run seamlessly or can be customized for your needs.\n\n## Mechanism\n\nJavaScript code coverage compliments your existing JavaScript tests by adding\ncode coverage statistics (which lines of your source code are covered by your\ntests).\n\nBlanket works in a 3 step process:\n\n  1. Loading your source files\n  2. Parsing the code using Esprima and node-falafel, and instrumenting the file by adding code tracking lines.\n  3. Connecting to hooks in the test runner to output the coverage details after the tests have completed.\n\n## Grunt Integration\n\nYou've got a few options for using Grunt with Blanket:\n\n**grunt-blanket**\n\nA Grunt plugin has been created to allow you to use Blanket like a\n\"traditional\" code coverage tool (creating instrumented copies of physical\nfiles, as opposed to live-instrumenting). The plugin runs as a standlone\nproject and can be found here.\n\n**grunt-blanket-qunit**\n\nRuns the QUnit-based Blanket report headlessly using PhantomJS. Results are\ndisplayed on the console, and the task will cause Grunt to fail if any of your\nconfigured coverage thresholds are not met. Minimum code coverage thresholds\ncan be configured per-file, per-module, and globally.\n\nSee:\n\n  * Plugin Repo\n  * Blog Walkthrough\n\n## Compatibility and Features List\n\nSee the Compatiblity and Feature List including links to working examples.\n\n## Roll your own\n\n  1. `git clone git@github.com:alex-seville/blanket.git`  \n\n  2. `npm install`  \n\n  3. Add your custom build details to the grunt.js file under `concat`\n  4. `npm run build`\n\nA minified and unminfied copy of the source can be created (see the `min`\ntask).\n\n## Development\n\n**All development takes place on the `master` branch**  \n**Your pull request must pass all tests (run `npm test` to be sure) and respect all existing coverage thresholds**\n\n## Contact\n\nFeel free to add questions to the Issue tracker, or send them to @blanket_js.\n\n## Contributors\n\nThanks to the many people who have contributed to the project.\n\nAnd thanks also to: RequireJS, Esprima, node-falafel, Mocha, Qunit.\n\n## Roadmap\n\nv1.1.5 - Refactor reporter API.\n\n## Revision History\n\nMay 1-13 - 1.1.4  \nLoaded reverting for grunt-blanket, branch tracking reporter fixed, coverage\non-the-go (displaying coverage results while a single page is being used).\n\nApr 28-13 - 1.1.3 YUI support added with custom adapter (and some wrapping\ncode). CompoundJS support appears to be outside the scope of project.\n\n... (see full revision history)\n\n## License\n\nCopyright (c) 2012-2013 Alex Seville  \nLicensed under the MIT license.\n\n", "last_crawled_at": "2015-10-30T17:24:16.879000", "git_url": "git://github.com/alex-seville/blanket.git", "open_issues": 114, "forks": 165, "id": 6192590, "size": 8188}},{"_index":"fosshelper","_type":"repos","_id":"56340a38c97470d7feb481e8","_score":0.044078022,"_source":{"watchers": 390, "name": "adm-zip", "language": "JavaScript", "source": "github", "created_at": "2012-02-22T14:06:15", "description": "A Javascript implementation of zip for nodejs. Allows user to create or extract zip files both in memory or to/from disk", "html_url": "https://github.com/cthackers/adm-zip", "owner": {"url": "https://api.github.com/users/cthackers", "avatar_url": "https://avatars.githubusercontent.com/u/210514?v=3", "type": "User"}, "updated_at": "2015-10-28T09:06:47", "readme": "###  README.md\n\n# ADM-ZIP for NodeJS\n\nADM-ZIP is a pure JavaScript implementation for zip data compression for\nNodeJS.\n\n# Installation\n\nWith npm do:\n\n    \n    \n    $ npm install adm-zip\n    \n\n## What is it good for?\n\nThe library allows you to:\n\n  * decompress zip files directly to disk or in memory buffers\n  * compress files and store them to disk in .zip format or in compressed buffers\n  * update content of/add new/delete files from an existing .zip\n\n# Dependencies\n\nThere are no other nodeJS libraries that ADM-ZIP is dependent of\n\n# Examples\n\n## Basic usage\n\n    \n    \n        var AdmZip = require('adm-zip');\n    \n        // reading archives\n        var zip = new AdmZip(\"./my_file.zip\");\n        var zipEntries = zip.getEntries(); // an array of ZipEntry records\n    \n        zipEntries.forEach(function(zipEntry) {\n            console.log(zipEntry.toString()); // outputs zip entries information\n            if (zipEntry.entryName == \"my_file.txt\") {\n                 console.log(zipEntry.data.toString('utf8')); \n            }\n        });\n        // outputs the content of some_folder/my_file.txt\n        console.log(zip.readAsText(\"some_folder/my_file.txt\")); \n        // extracts the specified file to the specified location\n        zip.extractEntryTo(/*entry name*/\"some_folder/my_file.txt\", /*target path*/\"/home/me/tempfolder\", /*maintainEntryPath*/false, /*overwrite*/true);\n        // extracts everything\n        zip.extractAllTo(/*target path*/\"/home/me/zipcontent/\", /*overwrite*/true);\n    \n    \n        // creating archives\n        var zip = new AdmZip();\n    \n        // add file directly\n        zip.addFile(\"test.txt\", new Buffer(\"inner content of the file\"), \"entry comment goes here\");\n        // add local file\n        zip.addLocalFile(\"/home/me/some_picture.png\");\n        // get everything as a buffer\n        var willSendthis = zip.toBuffer();\n        // or write everything to disk\n        zip.writeZip(/*target file name*/\"/home/me/files.zip\");\n    \n    \n        // ... more examples in the wiki\n\nFor more detailed information please check out the wiki.\n\n![build status](https://camo.githubusercontent.com/2a40aaeb1f0874f045c20e67680\n6030ee470421c/68747470733a2f2f7365637572652e7472617669732d63692e6f72672f637468\n61636b6572732f61646d2d7a69702e706e67)\n\n", "last_crawled_at": "2015-10-30T17:24:20.988000", "git_url": "git://github.com/cthackers/adm-zip.git", "open_issues": 67, "forks": 143, "id": 3515094, "size": 1133}}]}}